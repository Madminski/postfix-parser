#!/usr/bin/env perl

use Data::Dumper;

my $logfile = shift or die "Usage: $0 /directory/to/logfile\n";
my $pf_qmgr = 0;
my $pf_cleanup = 0;
my $pf_smtpd = 0;
my $pf_smtp = 0;
my $pf_bounce = 0;
my $pf_error = 0;
my $pf_flush = 0;
my $dsn_success = 0;
my $dsn_transient_fail = 0;
my $dsn_perm_fail = 0;
my ($msg,$date,$time,$server,$cmd,$pf_id,$line,$size,$first_seen,$status,$delay,$msg_id,$recipient,$sender,$nrcpt,$relay);
my $csv_format = "'<|msg_id|>'|<|pf_id|>|<|server|>|<|first_seen|>|<|deleted_time|>|'<|sender|>'|'<|recipient|>'|<|nrcpt|>|<|size|>|<|delay|>|<|status|>|<|relay|>|<|dsn_success|>|<|dsn_transient_fail|>|<|dsn_perm_fail|>|<|pf_qmgr|>|<|pf_cleanup|>|<|pf_smtpd|>|<|pf_smtp|>|<|pf_bounce|>|<|pf_error|>|<|pf_flush|>";
my $address = "all";
my $debug;# ="true";


read_file("$logfile");
#PRINTING
dbug(Dumper($msg));
dbug($msg->{$pf_id}->{recipient});
for $k ( keys %{$msg} ){
        #dbug("K=$k\n");
        unless ( $msg->{$k}->{skip} eq "true") {
                if (complete_record($k) eq "true") {
                        print_csv($k);
                }
                else {
                        dbug("SKIPPED $k");
                }
        }
        dbug("SKIPPED $k");

}

sub read_file {
        open(FH , $_[0]);
        while (<FH>) {
                parse_line( $_ );
        }
        close(FH);
}

sub parse_line {
        chomp( $_[0] );
        if ( $_[0] =~ /^(\w\w\w\s{1,2}\d{1,2}) (\d\d:\d\d:\d\d) (.*) postfix\/(\w+)\[\d+\]: ([0-9A-Z]+): (.*)/ ) {
        ( $date, $time, $server, $cmd, $pf_id, $line ) = ( $1, $2, $3, $4, $5, $6 );
                parse_postfix( $_ );
        } else {
                dbug("FAIL - $_");
                #TODO ERROR HANDLING
        }
}

sub parse_postfix{
    $time = "$date $time";
                # Find message or create new hash
                $msg->{$pf_id} = $msg->{$pf_id} ||= { pf_id => $pf_id, time => $date, server => $server, recipient => [ ], dsn_success => $dsn_success, dsn_transient_fail => $dsn_transient_fail, dsn_perm_fail => $dsn_perm_fail, pf_qmgr => $pf_qmgr, pf_cleanup => $pf_cleanup, pf_smtpd => $pf_smtpd, pf_smtp => $pf_smtp,pf_bounce => $pf_bounce,pf_error => $pf_error, pf_flush => $pf_flush};

                if ( $cmd eq 'qmgr' ) {
                        parse_qmgr($_);
                }
                elsif ( $cmd eq 'cleanup' ) {
                        parse_cleanup($_);
                }
                elsif ( $cmd eq 'smtpd' ) {
                        parse_smtpd($_);
                }
                elsif ( $cmd eq 'smtp' ) {
                        parse_smtp($_);
                }
                elsif ( $cmd eq 'bounce' ) {
                        parse_bounce($_);
                }
                elsif ( $cmd eq 'error' ) {
                        parse_error($_);
                }
                elsif ( $cmd eq 'flush' ) {
                        parse_flush($_);
                }
                else {
                        dbug("OTHER $cmd\n");
                }
}

sub parse_qmgr {
        $msg->{$pf_id}->{pf_qmgr}++;
    if ( $_ =~ /removed$/ ) {
        $msg->{$pf_id}->{deleted_time} = $time;
            dbug( "Message removed, printing mail.\n" );
    }
    else {
        if ( $_ =~ /from=<([^>]+)>/ || $_ =~ /from=(\<\>)/ ) {
                        my $addr = $1;
                        if ( $1 =~ /(@.*nhs\.net)/ ) {
                                $msg->{$pf_id}->{sender} = $addr ;
                                dbug( "$pf_id Got sender $1.\n" );
                        }
                        else {
                                $msg->{$pf_id}->{skip} = "true";
                                dbug("SHOULD SKIP - $1");
                        }

        }
        if ( $_ =~ /size=(\d+)/ ) {
            $msg->{$pf_id}->{size} = $1;
            dbug( "$pf_id Got size $1.\n" );
        }
        if ( $_ =~ /nrcpt=(\d+)/ ) {
            $msg->{$pf_id}->{nrcpt} = $1;
            dbug( "$pf_id Got nrcpt $1.\n" );
        }
    }
}

sub parse_cleanup {
        $msg->{$pf_id}->{pf_cleanup}++;
        $msg->{$pf_id}->{first_seen} = $time;
        dbug( "$pf_id Got first_seen $time.\n" );

        if ( $_ =~ /message-id=<(.*)>/ ) {
        $msg->{$pf_id}->{msg_id} = $1;
        dbug( "$pf_id Got msg_id $1.\n" );
    }
    if ( $_ =~ /(discard): (.*);/ ) {
        push @{ $msg->{$pf_id}->{info}   }, $2;
        dbug( "$pf_id Got info $2.\n" );
        $msg->{$pf_id}->{deleted_time} = $time;
        push @{ $msg->{$pf_id}->{status} }, $1;
        dbug( "$pf_id Got status $1.\n" );
        push @{ $msg->{$pf_id}->{delay} }, "none";
        dbug( "$pf_id Got delay = none.\n" );
        if ( $line =~/to=<([^>]+)>/ ) {
            if ( uniquerecipient( $1 ) eq "true") {
                push @{ $msg->{$pf_id}->{recipient} }, $1;
                dbug( "$pf_id Got to $1.\n" );
            }
        }
                #dbug(Dumper($msg->$pf_id));
        }
}

sub parse_smtpd {
        $msg->{$pf_id}->{pf_smtpd}++;
        if ( $line =~ /^(reject):/ ) {
        push @{ $msg->{$pf_id}->{status} }, $1;
        dbug( "$pf_id Got status $1.\n" );

        if ( $line =~/to=<([^>]+)>/ ) {
            if ( uniquerecipient( $1 ) eq "true") {
                push @{ $msg->{$pf_id}->{recipient} }, $1;
                dbug( "$pf_id Got to $1.\n" );
            }
            else {
                dbug( "$pf_id recipient FALSE $1.\n" );
            }
        }
        if ( $line =~ /RCPT from .*\]: (\d{3} \d\.\d\.\d .*);/ ) {
            push @{ $msg->{$pf_id}->{info}   }, $1;
            dbug( "$pf_id Got info $1.\n" );
        }
        push @{ $msg->{$pf_id}->{delay} }, 0;
        push @{ $msg->{$pf_id}->{relay} }, 'Never received message.';
        $msg->{$pf_id}->{deleted_time} = $time;
        $msg->{$pf_id}->{from} = $1 if $line =~ /from=<([^>]+)>/;
        $msg->{$pf_id}->{client} = $1 if $line =~ /RCPT from (.*]): /;
        $msg->{$pf_id}->{size} = 'unknown';

            dbug( "$pf_id got reject info, printing mail.\n" );
        #printmailinfo( $msg->{$pf_id} );
        #$readytoprint->{$pf_id} = 1;
    }
        if ( $line =~ /client=.*\[(\d{1,3}.\d{1,3}\.\d{1,3}\.\d{1,3})\]/ ) {
            $msg->{$pf_id}->{client} = $1;
            dbug( "$pf_id got client=$1.\n" );
        }
        $msg->{$pf_id}->{first_seen} = $time;
    dbug( "$pf_id Got first_seen $time.\n" );

}

sub parse_smtp {
        $msg->{$pf_id}->{pf_smtp}++;
    if ( $line =~ /orig_to=<([^>]+)>/ ) {
        push @{ $msg->{$pf_id}->{orig_to} }, $1;
        dbug( "$pf_id got orig_to $1.\n" );
    }
    #if ( $line =~ /to=<([^>]+)>/) {
        if ( $line =~ /to=<([^>]+)>/ && uniquerecipient( $1 ) eq "true" ) {
        push @{ $msg->{$pf_id}->{recipient} }, $1;
        dbug( "$pf_id got to $1. (2)\n" );
    }

    if ( $line =~ /delay=(\d+)/ || $line =~ /delay=(\d+\.\d+)/ ) {
        push @{ $msg->{$pf_id}->{delay} }, $1 ;
        dbug( "$pf_id got Delay=$1.\n" );
    }

    if ( $line =~ /status=(\w+) .+/ ) {
        push @{ $msg->{$pf_id}->{status} }, $1;
        dbug( "$pf_id got status=$1.\n" );
    }

        if ( $line =~ /dsn=2.\d+\.\d+/ ) { $msg->{$pf_id}->{dsn_success}++; dbug("$pf_id dsn_success + 1\n" ); }
        elsif ($line =~ /dsn=4.\d+\.\d+/ ) { $msg->{$pf_id}->{dsn_transient_fail}++; dbug("$pf_id dsn_transient_fail + 1\n" ); }
        elsif ($line =~ /dsn=5.\d+\.\d+/ ) { $msg->{$pf_id}->{dsn_perm_fail}++; dbug("$pf_id dsn_perm_fail + 1\n" ); }
        else { dbug("NO DSN Capture");}

#    if ($line =~ /dsn=\[(\d\.\d\.\d)\]/i ) {
#               print "DSN Triggered = $1";
#               #if dsn = 2.x.x then dsn_success=1
#               if ($1 =~ /2.\d\.\d/) { $msg->{$pf_id}->{dsn_success}++; dbug("$pf_id dsn_success + 1\n" );}
#               #if dsn = 4.x.x then dsn_transient_fail=1
#               if ($1 =~ /2.\d\.\d/) { $msg->{$pf_id}->{dsn_transient_fail}++; dbug("$pf_id dsn_transient_fail + 1\n" );}
#               #if dsn = 5.x.x then dsn_perm_fail=1
#               if ($1 =~ /2.\d\.\d/) { $msg->{$pf_id}->{dsn_perm_fail}++; dbug("$pf_id dsn_perm_fail + 1\n" );}
#        #push @{ $msg->{$pf_id}->{dsn} }, $1;
#               #dbug( "$pf_id got dsn=$1.\n" );
#    }

    if ( $line =~ /relay=(.*)\[\d{1,3}.\d{1,3}\.\d{1,3}\.\d{1,3}\]/i && $line !~ /status=deferred/ ) {
        my $tmprelay = $1;
                my $ext_relay = "external";
                if ($tmprelay =~ /(localhost)/ ) {
                        #push @{ $msg->{$pf_id}->{relay}  }, $1 if $line =~ /relay=(.*?), /;
                        push @{ $msg->{$pf_id}->{relay} }, $1;
                        dbug( "$pf_id got relay=$1.\n" );
                }
                else {
                        #push @{ $msg->{$pf_id}->{relay}  }, $1 if $line =~ /relay=(.*?), /;
                        push @{ $msg->{$pf_id}->{relay} }, $ext_relay;
                        dbug( "$pf_id got relay=$ext_relay.\n" );
                }


    }

    if ( $line =~ /client=.*\[(\d{1,3}.\d{1,3}\.\d{1,3}\.\d{1,3})\]/ ) {
        $msg->{$pf_id}->{client} = $1;
        dbug( "Got client=$1.\n" );
    }

    # We need to polish the info retreival.  Info is lost. Ref. bug #6.
    push @{ $msg->{$pf_id}->{info} }, $1 if $line =~ /status=.*(\(.*\)$)/;
    dbug( "$pf_id Got Info=$1.\n" );

    push @{ $msg->{$pf_id}->{extinfo} }, $1 if $line =~ /host .* said: (.*)/;
    dbug( "$pf_id Got ExtInfo=$1.\n" );

    if ( $line =~ /status=deferred/ ) {
        $msg->{$pf_id}->{first_seen} = $time;
        $msg->{$pf_id}->{deleted_time} = $time;
        #printmailinfo( $msg->{$pf_id} );
    }
}

sub parse_bounce{
        $msg->{$pf_id}->{pf_bounce}++;
}

sub parse_error {
        $msg->{$pf_id}->{pf_error}++;
}

sub parse_flush {
        $msg->{$pf_id}->{pf_flush}++;
}

#ORIGINAL SUBS
sub disableregexp() {
    my $result = $_[0];
    $result =~ s/(\[|\]|\-|\?|\+|\{|\}|\*|\(|\)|\@|\.)/\\$1/g;
    #$result =~ s/(.)/\\$1/g;
    $result =~ s/(\s)/_/g;
    return $result;
}

sub uniquerecipient {
    my $addr = &disableregexp( $_[0] );
    if ( defined ( $msg->{$pf_id}->{recipient} ) ) {
        for $i ( 0 .. $#{ $msg->{$pf_id}->{recipient} } ) {
            $j = &disableregexp( ${ $msg->{$pf_id}->{recipient} }[$i] );
            if ( lc($j) eq lc($addr) ) { return "false" }
        }
    }
    return "true";
}

sub dbug {
    if ( $debug ) {
        my $txt = $_[0];
        print "Debug: $txt\n";
    }
}

sub print_csv() {
    my $csv_form;
        if ( defined($msg->{$k}->{sender}) eq 1 && defined($msg->{$k}->{msg_id}) eq 1) {
                # One line for each recipient:
                for $j (0..$#{$msg->{$k}->{recipient}}) {
                        $csv_form = $csv_format;

                        # Put info into the csv-formatted csv-line:
                        for $i ( keys %{$msg->{$k}} ) {
                                $msg->{$k}->{$i} =~ s/,/;/g;

                                if ( $i =~ /^(recipient|orig_to|delay|relay|status|info)$/ ) {
                                        if ( defined( ${$msg->{$k}->{$i}}[$j] ) ) {
                                                $csv_form =~ s/\<\|$i\|\>/${$msg->{$k}->{$i}}[$j]/;
                                        }
                                        else {
                                                $csv_form =~ s/\<\|$i\|\>/UNKNOWN/;
                                        }
                                }
                                else {
                                        $csv_form =~ s/\<\|$i\|\>/$msg->{$k}->{$i}/;
                                }
                        }

                        # Clear all tables without info:
                        $csv_form =~ s/\<\|.*?\|\>//g;

                        print "$csv_form\n";
                }
        }
        else {
                dbug("NULL SKIP - $k:\n$msg->{$k}->{sender},$msg->{$k}->{msg_id}");
        }
}


sub complete_record {
        my $return_val = 0;
        dbug("CHECKING: $msg->{$k}->{pf_id}");
        if (defined($msg->{$k}->{msg_id})){dbug("msg_id DEFINED:        $msg->{$k}->{$msg_id}   ");} else {dbug("msg_id UNDEFINED"); $return_val++;}
        if (defined($msg->{$k}->{recipient} )){dbug("recipient DEFINED: $msg->{$k}->{$recipient}");}  else {dbug("recipient UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{nrcpt}     )){dbug("nrcpt DEFINED:             $msg->{$k}->{$nrcpt}    ")}   else {dbug("nrcpt UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{sender}    )){dbug("sender DEFINED:    $msg->{$k}->{$sender}   ")}   else {dbug("sender UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{status}    )){dbug("status DEFINED:    $msg->{$k}->{$status}   ")}   else {dbug("status UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{delay}     )){dbug("delay DEFINED:             $msg->{$k}->{$delay}    ")}   else {dbug("delay UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{msg_id}    )){dbug("msg_id DEFINED:    $msg->{$k}->{$msg_id}   ")}   else {dbug("msg_id UNDEFINED");$return_val++;}
        if (defined($msg->{$k}->{relay}    )){dbug("relay DEFINED:    $msg->{$k}->{$relay}   ")}   else {dbug("relay UNDEFINED");$return_val++;}
        if ($return_val eq 0) {
                dbug("$k = COMPLETE RECORD");
                return 'true';
        }
        else {
                dbug("$k = INCOMPLETE RECORD");
                return 'false';
        }
}
